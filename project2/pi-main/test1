"""Estimate the value of Pi with Monte Carlo simulation.
Author:  Liam Bouffard
Credits:  None
"""
import random
import doctest
from turtle import color
import points_plot
import math

GOOD_PI = 3.141592653589793
SAMPLES = 400

def in_unit_circle(x: float, y: float) -> bool:
  '''Returns True if and only if (x, y) lies within circle with origin (0, 0) and radius 1.0'''
  if math.sqrt(x**2 + y**2) <= 1.0:
    within_circle = True
  else:
    within_circle = False
  return within_circle

print(in_unit_circle(1.0, 1.0))


def rand_point_unit_sq() -> tuple[float, float]:
  '''Returns random x, y both in range 0..1.0, 0..1.0.'''
  x = random.random()
  y = random.random()
  return x, y

def plot_random_points(n_points: int = 500):
  '''Generate and plot n_points points in interval (0, 0) to (1, 1)'''
  points_plot.init()
  for i in range(n_points):
    x, y = rand_point_unit_sq()
    if in_unit_circle(x, y):
      points_plot.plot(x, y, color_rgb=(255, 10, 10)) # red
    else:
      points_plot.plot(x, y, color_rgb=(0, 0, 250)) # light grey
      print('triggered')
  points_plot.wait_to_close()

plot_random_points(SAMPLES)


